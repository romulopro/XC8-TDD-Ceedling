/* AUTOGENERATED FILE. DO NOT EDIT. */
#ifndef _MOCK_GPIO_ACCESS_H
#define _MOCK_GPIO_ACCESS_H

#include "unity.h"
#include "gpio_access.h"

/* Ignore the following warnings, since we are copying code */
#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic push
#endif
#if !defined(__clang__)
#pragma GCC diagnostic ignored "-Wpragmas"
#endif
#pragma GCC diagnostic ignored "-Wunknown-pragmas"
#pragma GCC diagnostic ignored "-Wduplicate-decl-specifier"
#endif

void mock_gpio_access_Init(void);
void mock_gpio_access_Destroy(void);
void mock_gpio_access_Verify(void);




#define GPIO_SetBit_Ignore() GPIO_SetBit_CMockIgnore()
void GPIO_SetBit_CMockIgnore(void);
#define GPIO_SetBit_StopIgnore() GPIO_SetBit_CMockStopIgnore()
void GPIO_SetBit_CMockStopIgnore(void);
#define GPIO_SetBit_ExpectAnyArgs() GPIO_SetBit_CMockExpectAnyArgs(__LINE__)
void GPIO_SetBit_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define GPIO_SetBit_Expect(port, bit) GPIO_SetBit_CMockExpect(__LINE__, port, bit)
void GPIO_SetBit_CMockExpect(UNITY_LINE_TYPE cmock_line, GPIO_PORTS port, PORT_BITS bit);
typedef void (* CMOCK_GPIO_SetBit_CALLBACK)(GPIO_PORTS port, PORT_BITS bit, int cmock_num_calls);
void GPIO_SetBit_AddCallback(CMOCK_GPIO_SetBit_CALLBACK Callback);
void GPIO_SetBit_Stub(CMOCK_GPIO_SetBit_CALLBACK Callback);
#define GPIO_SetBit_StubWithCallback GPIO_SetBit_Stub
#define GPIO_SetBit_IgnoreArg_port() GPIO_SetBit_CMockIgnoreArg_port(__LINE__)
void GPIO_SetBit_CMockIgnoreArg_port(UNITY_LINE_TYPE cmock_line);
#define GPIO_SetBit_IgnoreArg_bit() GPIO_SetBit_CMockIgnoreArg_bit(__LINE__)
void GPIO_SetBit_CMockIgnoreArg_bit(UNITY_LINE_TYPE cmock_line);
#define GPIO_ClearBit_Ignore() GPIO_ClearBit_CMockIgnore()
void GPIO_ClearBit_CMockIgnore(void);
#define GPIO_ClearBit_StopIgnore() GPIO_ClearBit_CMockStopIgnore()
void GPIO_ClearBit_CMockStopIgnore(void);
#define GPIO_ClearBit_ExpectAnyArgs() GPIO_ClearBit_CMockExpectAnyArgs(__LINE__)
void GPIO_ClearBit_CMockExpectAnyArgs(UNITY_LINE_TYPE cmock_line);
#define GPIO_ClearBit_Expect(port, bit) GPIO_ClearBit_CMockExpect(__LINE__, port, bit)
void GPIO_ClearBit_CMockExpect(UNITY_LINE_TYPE cmock_line, GPIO_PORTS port, PORT_BITS bit);
typedef void (* CMOCK_GPIO_ClearBit_CALLBACK)(GPIO_PORTS port, PORT_BITS bit, int cmock_num_calls);
void GPIO_ClearBit_AddCallback(CMOCK_GPIO_ClearBit_CALLBACK Callback);
void GPIO_ClearBit_Stub(CMOCK_GPIO_ClearBit_CALLBACK Callback);
#define GPIO_ClearBit_StubWithCallback GPIO_ClearBit_Stub
#define GPIO_ClearBit_IgnoreArg_port() GPIO_ClearBit_CMockIgnoreArg_port(__LINE__)
void GPIO_ClearBit_CMockIgnoreArg_port(UNITY_LINE_TYPE cmock_line);
#define GPIO_ClearBit_IgnoreArg_bit() GPIO_ClearBit_CMockIgnoreArg_bit(__LINE__)
void GPIO_ClearBit_CMockIgnoreArg_bit(UNITY_LINE_TYPE cmock_line);
#define GPIO_IsBitSet_IgnoreAndReturn(cmock_retval) GPIO_IsBitSet_CMockIgnoreAndReturn(__LINE__, cmock_retval)
void GPIO_IsBitSet_CMockIgnoreAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define GPIO_IsBitSet_StopIgnore() GPIO_IsBitSet_CMockStopIgnore()
void GPIO_IsBitSet_CMockStopIgnore(void);
#define GPIO_IsBitSet_ExpectAnyArgsAndReturn(cmock_retval) GPIO_IsBitSet_CMockExpectAnyArgsAndReturn(__LINE__, cmock_retval)
void GPIO_IsBitSet_CMockExpectAnyArgsAndReturn(UNITY_LINE_TYPE cmock_line, bool cmock_to_return);
#define GPIO_IsBitSet_ExpectAndReturn(port, bit, cmock_retval) GPIO_IsBitSet_CMockExpectAndReturn(__LINE__, port, bit, cmock_retval)
void GPIO_IsBitSet_CMockExpectAndReturn(UNITY_LINE_TYPE cmock_line, GPIO_PORTS port, PORT_BITS bit, bool cmock_to_return);
typedef bool (* CMOCK_GPIO_IsBitSet_CALLBACK)(GPIO_PORTS port, PORT_BITS bit, int cmock_num_calls);
void GPIO_IsBitSet_AddCallback(CMOCK_GPIO_IsBitSet_CALLBACK Callback);
void GPIO_IsBitSet_Stub(CMOCK_GPIO_IsBitSet_CALLBACK Callback);
#define GPIO_IsBitSet_StubWithCallback GPIO_IsBitSet_Stub
#define GPIO_IsBitSet_IgnoreArg_port() GPIO_IsBitSet_CMockIgnoreArg_port(__LINE__)
void GPIO_IsBitSet_CMockIgnoreArg_port(UNITY_LINE_TYPE cmock_line);
#define GPIO_IsBitSet_IgnoreArg_bit() GPIO_IsBitSet_CMockIgnoreArg_bit(__LINE__)
void GPIO_IsBitSet_CMockIgnoreArg_bit(UNITY_LINE_TYPE cmock_line);

#if defined(__GNUC__) && !defined(__ICC) && !defined(__TMS470__)
#if __GNUC__ > 4 || (__GNUC__ == 4 && (__GNUC_MINOR__ > 6 || (__GNUC_MINOR__ == 6 && __GNUC_PATCHLEVEL__ > 0)))
#pragma GCC diagnostic pop
#endif
#endif

#endif
